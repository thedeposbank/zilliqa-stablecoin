scilla_version 0

(* dBonds contract *)

import ListUtils BoolUtils IntUtils 


(***************************************************)
(*               Associated library                *)
(***************************************************)
library FundrContract


let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let min_int =
    fun (a : Uint128) => fun (b : Uint128) =>
    let alt = builtin lt a b in
    match alt with
    | True =>
        a
    | False =>
        b
end

let le_int =
    fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
        builtin eq a b
    end

let bnum_between =
    fun(x : BNum) =>
    fun(l : BNum) =>
    fun(r : BNum) =>
    let less = builtin blt x r in
    let gr = builtin blt l x in
    andb less gr

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FundrContract
(init_owner	: ByStr20,
init_withdrawer	: ByStr20,
dps_contract : ByStr20,
start_block	: BNum, (*not inclusive*)
end_block : BNum, (*not inclusive*)
dps_amount : Uint128, (*with decimals=6*)
price_decimals : Uint32, (*less than 6*)
dps_price : Uint128, (*DPS/ZIL price with decimals. ex. 4 => 10000 means DPS/ZIL = 1*)
public : Bool)

field owner : ByStr20	= init_owner	(*Current owner of the contract.*)
field  withdrawer : ByStr20	= init_withdrawer	(*Current withdrawer in the contract.*)
field  dps_sold : Uint128	= Uint128 0	(*Amount of DPS sold by the moment. *)

(*If fundraising is not public, only address from this map are allowed to do exchange transfers.*)
field whitelist : Map ByStr20 Uint128	= Emp ByStr20 Uint128

procedure startFundr()
    msg  = { _tag : "onFundraisingStart"; _recipient : dps_contract; _amount : Uint128 0;
            amount : dps_amount};
    msgs = one_msg msg;
    send msgs
end

procedure endFundr()
    msg  = { _tag : "onFundraisingEnd"; _recipient : dps_contract; _amount : Uint128 0};
    msgs = one_msg msg;
    send msgs
end

transition onFundrConnect()
    valid_auth = builtin eq _sender dps_contract;
    match valid_auth with
    | True =>
        startFundr
    | False =>
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition buyDPS()
    valid_auth <- exists whitelist[_sender];
    valid_auth = orb valid_auth public;
    cur_block <- & BLOCKNUMBER;
    valid_block = bnum_between cur_block start_block end_block;
    ds <- dps_sold;
    match valid_auth with
    | True =>
        match valid_block with
        | True =>
            ten = Uint128 10;
            p = builtin pow ten price_decimals;
            twelve = Uint32 12;
            six = Uint32 6;
            zp = builtin pow ten twelve;
            dpsp = builtin pow ten six;
            diffp = builtin div zp dpsp;
            dps_request = builtin mul _amount p; (*zp p*)
            dps_request = builtin div dps_request dps_price; (*zp*)
            leftover = builtin sub dps_amount ds; (*dpsp*)
            leftover = builtin mul leftover diffp; (*zp*)
            dps_to_send = min_int dps_request leftover; (*zp*)
            dps_diff = builtin sub dps_request dps_to_send; (*zp*)
            zil_to_return = builtin mul dps_diff dps_price; (*zp p*)
            zil_to_return = builtin div zil_to_return p; (*zp*)
            dps_to_send = builtin mul dps_to_send dpsp; (*zp dpsp*)
            dps_to_send = builtin div dps_to_send zp; (*dpsp*)
            accept;
            msg1 = { _tag : "Transfer"; _recipient : dps_contract; _amount : Uint128 0;
                    to : _sender; tokens : dps_to_send; code : Uint32 0};
            msg2 = {_tag : "AcceptZil";_recipient : _sender; _amount : zil_to_return};
            msgs1 = one_msg msg2;
            msgs2 = Cons {Message} msg1 msgs1;
            send msgs2;

            dps_sold_v = builtin add ds dps_to_send;
            dps_sold := dps_sold_v;
            e = {_eventname : "DPSsold"; caller : _sender; total_dps_sold : dps_sold_v};
            event e
        | False =>
            e = { _exception : "BlockNumberOutOfRange"};
            throw e
        end
    | False =>
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition withdraw(to : ByStr20)
    wdr <- withdrawer;
    bal <- _balance;
    valid_auth = builtin eq _sender wdr;
    cur_block <- & BLOCKNUMBER;
    ds <- dps_sold;
    expired = builtin blt end_block cur_block;
    sold_out = builtin eq dps_amount ds;
    valid_state = orb expired sold_out;
    match valid_auth with
    | True =>
        match valid_state with
        | True =>
            msg1 = { _tag : "ZILtoCapital"; _recipient : to; _amount : bal};
            msgs1 = one_msg msg1;
            send msgs1;
            e = {_eventname : "WithdrawSuccess"; caller : _sender; zil_amount : bal};
            event e
        | False =>
            e = { _exception : "FundraisingNotOver"};
            throw e
        end
    | False =>
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition whitelist(address : ByStr20)
    ow <- owner;
    valid_auth = builtin eq _sender ow;
    match valid_auth with
    | True =>
        one = Uint128 1;
        whitelist[address] := one;
        e = {_eventname : "WhitelistSuccess"; caller : _sender; address : address};
        event e
    | False => 
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition unWhitelist(address : ByStr20)
    ow <- owner;
    valid_auth = builtin eq _sender ow;
    match valid_auth with
    | True =>
        delete whitelist[address];
        e = {_eventname : "UnWhitelistSuccess"; caller : _sender; address : address};
        event e
    | False => 
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition transferOwnership(newOwner : ByStr20)
    ow <- owner;
    valid_auth = builtin eq _sender ow;
    match valid_auth with
    | True =>
        e = {_eventname : "TransferOwnershipSuccess"; 
            caller : _sender; old_owner : ow; new_owner : newOwner};
        event e;
        owner := newOwner
    | False => 
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition updateWithdrawer(newWithdrawer : ByStr20)
    wdr <- withdrawer;
    valid_auth = builtin eq _sender wdr;
    match valid_auth with
    | True =>
        e = {_eventname : "UpdateWithdrawerSuccess"; 
            caller : _sender; old_withdrawer: wdr; new_withdrawer : newWithdrawer};
        event e;
        withdrawer := newWithdrawer
    | False => 
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end

transition endFundraising()
    ow <- owner;
    valid_auth = builtin eq _sender ow;
    match valid_auth with
    | True =>
        endFundr
    | False =>
        e = { _exception : "SenderNotAuthorized"};
        throw e
    end
end